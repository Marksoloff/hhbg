from game import settings
from django import forms
from django.views.generic import TemplateView
from django.shortcuts import render, redirect, render_to_response
from django.http import HttpResponse, HttpResponseRedirect
from .forms import NameForm
from django.template import RequestContext
import random
import json
from django.middleware import csrf
"""
{
"bear_stats": ["unhinged", "hacker", "panda",]
"first_name": "billy"
"last_name": "smith"
}
I made a function that does something with the json and the variables


HOMEWORK:
Finish 'doing the names' that are autogenerated
figure out how to save/display the first & names.

"""

class HomeView(TemplateView):
    template_name = 'home/home.html'

#djangogirls code


from .forms import NameForm

def index(request):
    return render(request, 'index.html')
# The above code directs user to templates/index.html as the default HOME page!

def gender_question(request):
    return render(request, 'gender_question.html')


def name(request):
    first_name = random.choice(settings.asex_name)
    last_name = random.choice(settings.surname)
    update_stats('first_name', first_name)
    update_stats('last_name', last_name)
    return render(request, 'name.html', {'first_name': first_name, 'last_name': last_name})

def ungendered_page(request):
    return render(request, 'ungendered_page.html')


def stats(request):
    personality_stat = random.choice(settings.personalities)
    bear_types_stat = random.choice(settings.bear_types)
    criminal_roles_stat = random.choice(settings.criminal_roles)
    update_stats("bear_stats",[personality_stat, bear_types_stat, criminal_roles_stat])
    return render(request, 'stats.html', {'personality_stat': personality_stat,
                                          'bear_types_stat': bear_types_stat,
                                          'criminal_roles_stat': criminal_roles_stat,
                                          'postStat': settings.prompts["postStat"]})

############################# UTILITY FUNCTIONS ####################################

def diy_page(request):
    first_name = request.POST.get('first_name', "")
    update_stats('first_name', first_name)
    return render(request, 'diy_page.html')


def final(request):
    with open("all_bear_info.json", "r") as jsonFile:
        bear_info = json.load(jsonFile)
    return render(request, 'final.html', {
                             'personality_stat': bear_info['bear_stats'][0],
                             'bear_types_stat': bear_info['bear_stats'][1],
                             'criminal_roles_stat': bear_info['bear_stats'][2],
                             'first_name': bear_info['first_name'],
                             'last_name': bear_info['last_name']
                              })

def update_stats(stat_key, stat_value):
    with open("all_bear_info.json", "r") as jsonFile:
        bear_info = json.load(jsonFile)
    bear_info[stat_key] = stat_value
    with open("all_bear_info.json", "w") as jsonFile:
        jsonFile.write(json.dumps(bear_info))

def get_or_create_csrf_token(request):
    token = request.META.get('CSRF_COOKIE', None)
    if token is None:
        token = csrf._get_new_csrf_key()
        request.META['CSRF_COOKIE'] = token
    request.META['CSRF_COOKIE_USED'] = True
    return token
